/* Generated by MyraPad at 2024/4/14 16:49:36 */

using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Myra.Graphics2D;
using Myra.Graphics2D.UI;

namespace BazaarBounty
{
    public partial class StatusBarWidget : IWidgetBase
    {
        public StatusBarWidget()
        {
            BuildUI();
        }

        public void Update()
        {
            // Update health bar
            PlayerCharacter player = BazaarBountyGame.player;
            int health = BazaarBountyGame.player.CurrHealth;
            int maxHealth = BazaarBountyGame.player.MaxHealth;
            // max 2 rows and 5 columns, each heart can represent 25 health points at most
            
            healthGrid.Widgets.Clear();
            int activeHeartCount = health / 25;
            int heartCount = (int)Math.Ceiling((float)maxHealth / 25);
            for (int i = 0; i < heartCount; ++i)
            {
                var image = new Image
                {
                    Renderable = heartEmptyImage,
                    Width = 64,
                    Height = 64
                };
                Grid.SetRow(image, i % 5);
                Grid.SetColumn(image, i / 5);
                healthGrid.Widgets.Add(image);
            }
            for (int heartIndex = 0; heartIndex < activeHeartCount; ++heartIndex)
            {
                var image = new Image
                {
                    Renderable = heartImage,
                    Width = 64,
                    Height = 64
                };
                Grid.SetRow(image, heartIndex % 5);
                Grid.SetColumn(image, heartIndex / 5);
                healthGrid.Widgets.Add(image);
            }
            if (health % 25 > 0)
            {
                var image = new Image
                {
                    Renderable = heartImage,
                    Width = 64,
                    Height = 64,
                    Opacity = (float)(health % 25) / 25
                };
                Grid.SetRow(image, activeHeartCount % 5);
                Grid.SetColumn(image, activeHeartCount / 5);
                healthGrid.Widgets.Add(image);
            }

            // Update dash timer, each timer icon represents 0.5s
            dashPanel.Widgets.Clear();
            if (player.DashElapsedTime <= 0 || player.DashElapsedTime >= player.DashCDTime + player.DashTime)
            {
                double totalCDTime = player.DashCDTime + player.DashTime;
                int num = (int)Math.Ceiling(totalCDTime / 0.5);
                for (int i = 0; i < num; i++)
                {
                    var image = new Image
                    {
                        Renderable = dashImage,
                        Width = 48,
                        Height = 48
                    };
                    dashPanel.Widgets.Add(image);
                }
            }
            else
            {
                double elapsedTime = player.DashElapsedTime;
                int num = (int)Math.Floor(elapsedTime / 0.5);
                for (int i = 0; i < num; i++)
                {
                    var image = new Image
                    {
                        Renderable = dashImage,
                        Width = 48,
                        Height = 48
                    };
                    dashPanel.Widgets.Add(image);
                }
                
                var image2 = new Image
                {
                    Renderable = dashImage,
                    Width = 48,
                    Height = 48,
                    Opacity = (float)(elapsedTime - 0.5 * num)
                };
                dashPanel.Widgets.Add(image2);
            }
            
            // Update the attack panel (show the player attack)
            attackLabel.Text = player.PrimaryWeapon.Damage.ToString();
            rangedLabel.Text = player.SecondaryWeapon.Damage.ToString();
            meleeDefLabel.Text = string.Format("{0:P0}", player.Melee_defense);
            rangedDefLabel.Text = string.Format("{0:P0}", player.Ranged_defense);

            // Update the temporary buffs icons and timers
            buffGrid.Widgets.Clear();
            List<Buff> buffs = player.TemporaryBuffs;
            for (int i = 0; i < buffs.Count; i++)
            {
                string fruitName = buffs[i].BuffName.Split()[0];
                var image = new Image
                {
                    Renderable = buffIconMap[fruitName],
                    MinWidth = 32,
                    MinHeight = 32,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
                Grid.SetRow(image, i);
                Grid.SetColumn(image, 0);
                buffGrid.Widgets.Add(image);
                var timerLabel = new Label
                {
                    Text = $"{(int)buffs[i].RemainingTime}s",
                    Font = labelFont24,
                    Height = 16,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
                Grid.SetRow(timerLabel, i);
                Grid.SetColumn(timerLabel, 1);
                buffGrid.Widgets.Add(timerLabel);
            }

            // Update the level number
            levelLabel.Text = $"Level {LevelManager.NextLevelNumber - 1}";

            // Update the bullet numbers
            // assume the max bullet of the player is 20
            // each bullets icon can represent 4 bullets
            bulletsPanel.Widgets.Clear();
            bulletsPanel.Widgets.Add(bulletsLabel);
            int bullets = BazaarBountyGame.player.CurrBullet;
            int maxBullets = BazaarBountyGame.player.MaxBullet;
            int rows = bullets / 4;
            for (int i = 0; i < rows; i++)
            {
                var image = new Image
                {
                    Renderable = bulletImage[3],
                    Width = 84,
                    Height = 64,
                    Margin = new Thickness(0, 0, 20, 0),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
                bulletsPanel.Widgets.Add(image);
            }
            if (bullets % 4 > 0)
            {
                var image = new Image
                {
                    Renderable = bulletImage[bullets % 4 - 1],
                    Width = 84,
                    Height = 64,
                    Margin = new Thickness(0, 0, 20, 0),
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                };
                bulletsPanel.Widgets.Add(image);
            }
        }
    }
}